(()=>{"use strict";const e="struct Fragment {\r\n    @builtin(position) Position : vec4<f32>, // builtin screen ka pposition\r\n    @location(0) @interpolate(flat) Color : vec4<f32> // location in the vertex buffer\r\n};\r\n\r\n@vertex\r\nfn vs_main(@location(0) vertexPosition: vec2<f32>, @location(1) vertexColor : vec3<f32>) -> Fragment {\r\n\r\n    var output : Fragment;\r\n    output.Position = vec4<f32>(vertexPosition, 0.0, 1.0);\r\n    output.Color = vec4<f32>(vertexColor, 1.0);\r\n\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn fs_main(@location(0) @interpolate(flat) Color: vec4<f32>) -> @location(0) vec4<f32> {\r\n    return Color;\r\n}\r\n\r\n// what are these function parameters\r\n// what is that fragment shader, how tf is that working";class t{constructor(e,t){if(3!=t.length||t.some(e=>2!=e.length))throw new Error("expected 3 vertices on the triangle mesh, each with [x,y]");const r=new Float32Array([t[0][0],t[0][1],0,0,0,t[1][0],t[1][1],0,0,0,t[2][0],t[2][1],0,0,0]),n=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,o={size:r.byteLength,usage:n,mappedAtCreation:!0};this.buffer=e.createBuffer(o),new Float32Array(this.buffer.getMappedRange()).set(r),this.buffer.unmap(),this.bufferLayout={arrayStride:20,attributes:[{shaderLocation:0,format:"float32x2",offset:0},{shaderLocation:1,format:"float32x3",offset:8}]}}}var r,n;n=function*(){var r;const n=document.getElementById("gfx-main"),o=yield null===(r=navigator.gpu)||void 0===r?void 0:r.requestAdapter(),a=yield null==o?void 0:o.requestDevice(),i=n.getContext("webgpu"),f="bgra8unorm";i.configure({device:a,format:f,alphaMode:"opaque"});const u=[new Float32Array([0,.05]),new Float32Array([-.05,-.05]),new Float32Array([.05,-.05])],s=[new Float32Array([.05,.15]),new Float32Array([0,.05]),new Float32Array([.1,.05])],c=new t(a,u),l=new t(a,s),d=a.createRenderPipeline({vertex:{module:a.createShaderModule({code:e}),entryPoint:"vs_main",buffers:[c.bufferLayout]},fragment:{module:a.createShaderModule({code:e}),entryPoint:"fs_main",targets:[{format:f}]},primitive:{topology:"triangle-list"},layout:"auto"}),v=a.createCommandEncoder(),h=i.getCurrentTexture().createView(),m=v.beginRenderPass({colorAttachments:[{view:h,clearValue:{r:1,g:1,b:1,a:0},loadOp:"clear",storeOp:"store"}]});m.setPipeline(d),m.setVertexBuffer(0,c.buffer),m.draw(3,1,0,0),m.setVertexBuffer(0,l.buffer),m.draw(3,1,0,0),m.end(),a.queue.submit([v.finish()])},new((r=void 0)||(r=Promise))(function(e,t){function o(e){try{i(n.next(e))}catch(e){t(e)}}function a(e){try{i(n.throw(e))}catch(e){t(e)}}function i(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r(function(e){e(n)})).then(o,a)}i((n=n.apply(void 0,[])).next())})})();